// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"
	dao "leaderboard/dao"

	mock "github.com/stretchr/testify/mock"
)

// PlayerDao is an autogenerated mock type for the PlayerDao type
type PlayerDao struct {
	mock.Mock
}

type PlayerDao_Expecter struct {
	mock *mock.Mock
}

func (_m *PlayerDao) EXPECT() *PlayerDao_Expecter {
	return &PlayerDao_Expecter{mock: &_m.Mock}
}

// GetTopN provides a mock function with given fields: ctx, limit
func (_m *PlayerDao) GetTopN(ctx context.Context, limit int) ([]*dao.Player, error) {
	ret := _m.Called(ctx, limit)

	var r0 []*dao.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*dao.Player, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*dao.Player); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.Player)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlayerDao_GetTopN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopN'
type PlayerDao_GetTopN_Call struct {
	*mock.Call
}

// GetTopN is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
func (_e *PlayerDao_Expecter) GetTopN(ctx interface{}, limit interface{}) *PlayerDao_GetTopN_Call {
	return &PlayerDao_GetTopN_Call{Call: _e.mock.On("GetTopN", ctx, limit)}
}

func (_c *PlayerDao_GetTopN_Call) Run(run func(ctx context.Context, limit int)) *PlayerDao_GetTopN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *PlayerDao_GetTopN_Call) Return(_a0 []*dao.Player, _a1 error) *PlayerDao_GetTopN_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlayerDao_GetTopN_Call) RunAndReturn(run func(context.Context, int) ([]*dao.Player, error)) *PlayerDao_GetTopN_Call {
	_c.Call.Return(run)
	return _c
}

// Truncate provides a mock function with given fields: ctx
func (_m *PlayerDao) Truncate(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlayerDao_Truncate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Truncate'
type PlayerDao_Truncate_Call struct {
	*mock.Call
}

// Truncate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PlayerDao_Expecter) Truncate(ctx interface{}) *PlayerDao_Truncate_Call {
	return &PlayerDao_Truncate_Call{Call: _e.mock.On("Truncate", ctx)}
}

func (_c *PlayerDao_Truncate_Call) Run(run func(ctx context.Context)) *PlayerDao_Truncate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PlayerDao_Truncate_Call) Return(_a0 error) *PlayerDao_Truncate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PlayerDao_Truncate_Call) RunAndReturn(run func(context.Context) error) *PlayerDao_Truncate_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: ctx, player
func (_m *PlayerDao) Upsert(ctx context.Context, player *dao.Player) (*dao.Player, error) {
	ret := _m.Called(ctx, player)

	var r0 *dao.Player
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dao.Player) (*dao.Player, error)); ok {
		return rf(ctx, player)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dao.Player) *dao.Player); ok {
		r0 = rf(ctx, player)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Player)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dao.Player) error); ok {
		r1 = rf(ctx, player)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlayerDao_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type PlayerDao_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - ctx context.Context
//   - player *dao.Player
func (_e *PlayerDao_Expecter) Upsert(ctx interface{}, player interface{}) *PlayerDao_Upsert_Call {
	return &PlayerDao_Upsert_Call{Call: _e.mock.On("Upsert", ctx, player)}
}

func (_c *PlayerDao_Upsert_Call) Run(run func(ctx context.Context, player *dao.Player)) *PlayerDao_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dao.Player))
	})
	return _c
}

func (_c *PlayerDao_Upsert_Call) Return(_a0 *dao.Player, _a1 error) *PlayerDao_Upsert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PlayerDao_Upsert_Call) RunAndReturn(run func(context.Context, *dao.Player) (*dao.Player, error)) *PlayerDao_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPlayerDao interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlayerDao creates a new instance of PlayerDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlayerDao(t mockConstructorTestingTNewPlayerDao) *PlayerDao {
	mock := &PlayerDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
